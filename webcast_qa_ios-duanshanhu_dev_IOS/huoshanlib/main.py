# -*- coding: utf8 -*-
"""main page
"""
#2020/06/28 auto generated by shoots

from uibase.upath import UPath, text_, type_, label_, id_, visible_
from uibase.controls import Window, TextEdit, UIElementBase
import time
from webcastlib.mobile_account import MobileRequest
from shoots import logger
from huoshanlib.loginWindow import LoginWindow
from huoshanlib.popup import PrivacyAlertPop
class MainWindow(Window):
    """main window
    """
    window_spec = {"path": UPath(index=0, depth=1)}
    
    def get_locators(self):
        return {
            #基础
            "首页": {"path": UPath(type_ == "UITabBarButton", label_ == "首页")},
            "上滑查看更多视频": {"path": UPath(label_ == "上滑查看更多视频",type_=="UILabel")},
            "精选tab滑动引导页面": {"path": UPath(type_ == "HTSVideoSlideScrollToNextGuideView", visible_ == True)},
            "精选tab滑动引导动画": {"root": "精选tab滑动引导页面", "path": UPath(type_ == "LOTAnimationView", visible_ == True)},


            #直播间内控件
            '直播间a': {"path": UPath(type_ == "IESLiveFeedCollectionView")},#直播间内部
            "小直播间": {"path": UPath(type_ == "HTSLiveFeedCollectionViewCell",  visible_ == True, index=0)},#直播间按钮
            "直播间内页面": {"path": UPath(type_ == "IESLiveFeedCollectionView")},
            "退出直播间": {"path": UPath(label_ == "kHTSLiveToolbarItemClose", visible_ == True)},
            "关注": {"path": UPath(type_ == "UIButton", label_ == "关注")},
            "粉丝团入口": {"path": UPath(id_ == "(fansBtn)")},
            "主播id": {"path": UPath(id_ == "anchorName", visible_ == True, index=0)},

            #登录相关
            "注册/登录": {"path": UPath(type_ == "UIButton", label_ == "注册/登录")},
            "进入我的主页": {"path": UPath(type_ == "UIButton", label_ == "进入我的主页")},

            "手机号": {"type": TextEdit,
                    "path": UPath(type_ == "UITextField", label_ == "请输入手机号")},
            #"下一步": {"path": UPath(type_ == "UIButton", id_=="(nextButton)",label_ == "下一步")},
            "下一步": {"path": UPath(type_ == "UIButton", label_ == "下一步")},
            "协议勾选": {"path": UPath(id_ == "(approveButton)", label_ == "协议勾选")},
            "验证码": {"type": TextEdit,
                    "path": UPath(type_ == "UITextField", label_ == "请输入验证码")},
            "登录": {"path": UPath(type_ == "UIButton", label_ == "登录",visible_==True)},
            "进入登录": {"path": UPath(type_ == "UIButtonLabel", id_=="(titleView)",label_ == "登录")},
            "头像": {"path": UPath(type_ == "UIImageView", label_ == "头像")},
            "左侧个人条": {"path": UPath(type_ == "UITableView")},
            "设置": {"path": UPath(type_ == "UILabel", label_ == "设置")},
            "退出登录": {"path": UPath(type_ == "UITableViewLabel", label_ == "退出登录")},
            "设置页": {"path": UPath(type_ == "UIViewControllerWrapperView") / UPath(type_ == "UITableView", depth=2)},


            #开播相关
            "视频按钮": {"path": UPath(type_ == "HTSDrawerRecordButton")},
            "直播_底": {"path": UPath(label_ == "直播", type_ == "UITabBarButton")},
            "直播_拍摄口": {"path": UPath(label_ == "直播", type_ == "UIButton")},
            "直播tab": {"path": UPath(type_ == "UIAccessibilityElement", label_ == "直播")},
            "拍摄": {"path": UPath(label_ == "拍摄", type_ == "TabbarCustomButton")},
            "开直播按钮": {"path": UPath(type_ == "UIButton", label_ == "直播")},
            "开始视频直播": {"path": UPath(type_ == "UIButtonLabel", label_ == "开始视频直播")},
            "直播意外中断了": {"path": UPath(type_ == "UILabel", label_ == "直播意外中断了")},
            "恢复直播": {"path": UPath(type_ == "UIButton", label_ == "恢复直播")},
            "关播按钮": {"path": UPath(type_ == "HTSLiveToobarItemCell", label_ == "closeLive")},
            "关播按钮_170": {"path": UPath(label_ == "关闭直播")},

            "确定": {"path": UPath(type_ == "UIButton", label_ == "确定")},
            "关播页关闭按钮": {"path": UPath(type_ == "UIButton", label_ == "close")},
            "关播页关闭按钮_170": {"path": UPath(label_ == "退出关播页面", type_ == "UIButton")},
            "更多按钮": {"path": UPath(type_ == "HTSLiveToobarItemCell", label_ == "group")},
            "更多按钮_170": {"path": UPath(label_ == "更多")},

            "礼物": {"path": UPath(type_ == "UILabel", label_ == "礼物")},
            "礼物a": {"path": UPath(type_ == "HTSLiveRoomGiftCell", index = 0)},
            "赠送": {"path": UPath(type_ == "UIButton", label_ == "赠送")},
            #"礼物面板关闭按钮": {"path": UPath(type_ == "UIImageView",id_=="(imageView)",visible_== True,index=-1)},
            "礼物面板关闭按钮": {"path": UPath(label_ == "IESLiveGiftPanelCloseButtonAccessID")},
            "确认": {"path": UPath(type_ == "UIButton", label_ == "确认")},
            "提示结束直播": {"path": UPath(type_ == "UIButton", label_ == "结束直播")},
            "退出": {"path": UPath(type_ == "UIButton", label_ == "退出")},
            "直播头像": {"path": UPath(label_ == "用户头像",id_=="(avatarView)",type_=="HTSLiveAvatarImageView")},
            "关注弹窗": {"path": UPath(type_=="HTSLiveFollowGuidePopupView")},
            "页面": {"path": UPath(type_=="HTSEventForwardingView",visible_==True,index=7)},


        }

    def check_epic_swipe_guide(self):
        """处理精选tab上下滑引导
               """
        if self["精选tab滑动引导动画"].wait_for_existing(timeout=5, raise_error=False):
            logger.info("找到精选tab滑动引导窗口")
            logger.info(self["精选tab滑动引导动画"].driver.get_element_info(self["精选tab滑动引导动画"].id))
            rect = self["精选tab滑动引导动画"].rect
            to_x = rect.center[0]
            to_y = rect.center[1] - rect.height / 2
            # + 30
            self["精选tab滑动引导动画"].drag(to_x, to_y, 0, rect.height)


    def init(self):
        #检测个人信息的弹窗
        privacyAlertPop = PrivacyAlertPop(root=self.app)
        privacyAlertPop.handle()
        time.sleep(10)

        #检测是否有个人弹窗
        """处理精选tab上下滑引导
                      """
        if self["精选tab滑动引导动画"].wait_for_existing(timeout=20, raise_error=False):
            logger.info("找到精选tab滑动引导窗口")
            logger.info(self["精选tab滑动引导动画"].driver.get_element_info(self["精选tab滑动引导动画"].id))
            rect = self["精选tab滑动引导动画"].rect
            to_x = rect.center[0]
            to_y = rect.center[1] - rect.height / 2
            # + 30
            self["精选tab滑动引导动画"].drag(to_x, to_y, 0, rect.height)
    def check_tab(self):
        self["首页"].click()


    def StartLiving(self):
        #通过点击直播进入开直播
        if self["视频按钮"].wait_for_visible(raise_error=False):
            print("通过点击的直播开直播")
            self["视频按钮"].click()
            time.sleep(2)
            self["开直播按钮"].click()


        elif self["拍摄"].wait_for_visible(raise_error=False):
            time.sleep(2)
            self["拍摄"].click()
            self["直播_拍摄口"].wait_for_visible()
            time.sleep(2)
            self["直播_拍摄口"].click()

        time.sleep(3)
        if self["直播意外中断了"].existing:
            self["恢复直播"].click()
            return
        self["开始视频直播"].wait_for_visible(raise_error=False)
        while self["开始视频直播"].existing:
            self["开始视频直播"].click()
            time.sleep(5)
        if self["直播意外中断了"].existing:
            self["恢复直播"].click()

    def StartLivingSuccess(self):
        if self["关播按钮_170"].wait_for_visible(timeout=10,raise_error=False):
            return 0
        elif self["关播按钮"].wait_for_visible(timeout=10,raise_error=False):
            return 0
        else:
            return 1

    def checked_more(self):
        # 多端登陆看直播前先退出登录
        if self["确定"].wait_for_visible(timeout=6, raise_error=False):
            self["确定"].click()
            time.sleep(3)
        if self["提示结束直播"].wait_for_visible(timeout=6, raise_error=False):
            self["提示结束直播"].click()
            time.sleep(3)

    def CloseLiving(self):

        time.sleep(3)
        if self["关播按钮_170"].wait_for_visible(raise_error=False):
            self["关播按钮_170"].click()
        else:
            self["关播按钮"].click()
        time.sleep(6)
        if not self["确定"].wait_for_visible(raise_error = False):
            self["关播按钮"].click()
        else:
            pass
        self["确定"].click()

    def CloseLivingSuccessful(self):

        if self["关播页关闭按钮_170"].wait_for_visible(raise_error=False):
            return 0
        elif self["关播页关闭按钮"].wait_for_visible(raise_error=False):
            return 0
        else:
            return 1

    def log_in(self):

        #等待弹窗处理
        time.sleep(20)
        #首次登录
        if self["注册/登录"].wait_for_visible(raise_error=False):
            print("找到了注册/登录")
            self["注册/登录"].click()
            time.sleep(2)
        #已经注册过的用户进行登陆
        elif self["进入登录"].wait_for_visible(raise_error=False):
            print("找到了进入登录")
            self["进入登录"].click()
            time.sleep(2)
        else:
            logger.warning("找不到登陆入口")
            return

        #在已经登陆的情况下点击了用户头像
        if self["进入我的主页"].wait_for_visible(timeout=4,raise_error=False):
            self["进入我的主页"].scroll(distance_x=300, distance_y=0)
            return

        g = MobileRequest()
        num = g.get_num(tags=1112)
        self.username = num
        self.usercode = "0819"
        logger.info(num)
        time.sleep(5)
        # login_admin = LoginWindow(root=self.app)
        # login_admin.login()

        #登陆界面被独立了出来
        self["手机号"].wait_for_visible()
        self["手机号"].input(self.username)
        if self["协议勾选"].wait_for_visible(raise_error=False):
            self["协议勾选"].click()
        time.sleep(5)
        self["下一步"].wait_for_visible()
        self["下一步"].click()
        time.sleep(3)
        self["验证码"].input(self.usercode)

        if self["登录"].wait_for_visible(timeout=10, raise_error=False):
            self["登录"].click()
        #     time.sleep(5)

    def log_out(self, num):
        if self["关播页关闭按钮"].existing:
            self["关播页关闭按钮"].click()
        self["头像"].click()
        self["左侧个人条"].scroll(distance_x=0, distance_y=400)
        self["设置"].click()
        time.sleep(3)
        self["设置页"].scroll(distance_x=0, distance_y=500)
        time.sleep(3)
        if not self["退出登录"].visible:
            self["设置页"].scroll(distance_x=0, distance_y=500)
        self["退出登录"].click()
        self["确认"].click()
        time.sleep(3)
        g = MobileRequest()
        g.release_num(tags=1112, num=num)

    def SendGift(self):
        time.sleep(4)
        if self["更多按钮_170"].wait_for_visible(timeout=10, raise_error=False):
            time.sleep(2)
            self["更多按钮_170"].click()
        else:
            self["关播按钮"].click()
        time.sleep(6)

        if not self["礼物"].wait_for_visible(raise_error = False):
            self["更多按钮_170"].click()
            time.sleep(1)
        else:
            self["礼物"].click()
        time.sleep(5) # 等待礼物资源加载
        self["礼物a"].click()
        time.sleep(3)
        if not self["赠送"].wait_for_visible(raise_error=False):
            self["礼物a"].click()
            time.sleep(3)
        self["赠送"].click()
        time.sleep(5)

        if self["礼物面板关闭按钮"].wait_for_visible(timeout=10, raise_error=False):
            self["礼物面板关闭按钮"].click()



    def EnterRoom(self):

        if self["直播tab"].wait_for_existing(raise_error=False):

            time.sleep(4)
            self.check_tab(title="直播tab")
            time.sleep(7)

        else:
            time.sleep(4)
            self.check_tab(title="直播_底")

            time.sleep(7)


        self["小直播间"].wait_for_visible(raise_error=False)
        self["小直播间"].click()


        time.sleep(3)


    def EnterRoomSuccess(self):
        if self["直播头像"].wait_for_visible(30, raise_error = False):
            return 0
        else:
            return 1

    def QuitRoom(self):
        self["退出直播间"].click()
        time.sleep(4)
        # if self["退出直播间"].existing:
        #     self["退出直播间"].click()
        if self["退出"].wait_for_existing(raise_error=False):
            self["退出"].click()
            time.sleep(2)
        if self["退出直播间"].existing:
                self["退出直播间"].click()
                if self["退出"].existing:
                    self["退出"].click()
        time.sleep(4)

    def QuitRoomSuccess(self):
        if self["直播tab"].wait_for_visible(30, raise_error = False):
            return 0
        else:
            return 1

    def FollowAnchor(self):
        if self["关注"].visible:
            self["关注"].click()
            time.sleep(4)
            if self["粉丝团入口"].wait_for_visible(raise_error=False):
                return 0
            else:
                self["关注"].wait_for_visible(raise_error=False)
                self["关注"].click()
                return 0
        else:
            while self["粉丝团入口"].visible:
                self.SwipeToNextRoom()
            if self["关注"].visible:
                self["关注"].click()
                time.sleep(2)
                if self["粉丝团入口"].wait_for_visible(raise_error=False):
                    return 0
                else:
                    self["关注"].wait_for_visible(raise_error=False)
                    self["关注"].click()
                    return 0
            else:
                return 1

    def SwipeToNextRoom(self):
        #去除关注提醒的弹窗
        self.关注.scroll(distance_x=0, distance_y=600)

    def ScrollToNextRoom(self):
        anchor_a = self.GetAnchorid()

        self.SwipeToNextRoom()
        time.sleep(20)
        self.SwipeToNextRoom()
        time.sleep(20)
        anchor_b = self.GetAnchorid()
        if anchor_a == anchor_b:
            return 1
        else:
            return 0

    def GetAnchorid(self):
        self["主播id"].refresh()
        Anchorid = self["主播id"].elem_info["label"]
        print(Anchorid)
        return Anchorid

    def check_tab(self, title):
        self[title].refresh()
        self[title].wait_for_visible()

        time.sleep(3)
        tab_center = self[title].rect.center
        logger.info("点击tab前，accessibility元素坐标：%s" % self[title].rect)
        self.app.click(tab_center[0], tab_center[1])
        logger.info("点击tab后，accessibility元素坐标：%s" % self[title].rect)
        self[title].click()